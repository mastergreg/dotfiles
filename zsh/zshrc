# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="master"
ZSH_THEME="master-clean"
#ZSH_THEME="juanghurtado"


DISABLE_AUTO_TITLE="true" 
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git mercurial)
libs=(completion correction functions git theme-and-appearance history)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
export PATH=/home/master/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin:/usr/games/bin

case "${TERM}" in
    dump)
        PROMPT='%n@%m:%~%% '
        ;;

    linux)
        ;;
esac


# {{{ Manual pages
#     - colorize, since man-db fails to do so
export LESS_TERMCAP_mb=$'\E[01;31m'   # begin blinking
export LESS_TERMCAP_md=$'\E[01;31m'   # begin bold
export LESS_TERMCAP_me=$'\E[0m'       # end mode
export LESS_TERMCAP_se=$'\E[0m'       # end standout-mode
export LESS_TERMCAP_so=$'\E[1;33;40m' # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'       # end underline
export LESS_TERMCAP_us=$'\E[1;32m'    # begin underline
# }}}


bindkey -v
# /etc/inputrc initialization file for readline
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[5~" history-search-backward
bindkey "\e[6~" history-search-forward
bindkey "\e[3~" delete-char
bindkey "\e[2~" quoted-insert
bindkey "\e[5C" forward-word
bindkey "\e[5D" backward-word
bindkey "\e\e[C" forward-word
bindkey "\e\e[D" backward-word
bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word
bindkey "\eOc" forward-word
bindkey "\eOd" backward-word
bindkey "\e[1;3C" forward-word
bindkey "\e[1;3D" backward-word
bindkey "\e[8~" end-of-line
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
bindkey "\e[7~" beginning-of-line
bindkey "\e[8~" end-of-line


bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

alias ls='ls --color=auto'
alias l='ls --color=auto'
alias la='ls -A'
alias ll='ls -alFh'
alias rl='rlwrap -Acr'
alias files="ls -R | grep ':$' | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/' "
[[ -x =time ]] && alias time='command time'
alias ping='ping -c 4'
alias grep='grep --color=auto'
alias x='exit'
alias c='clear'
alias s='source ~/.zshrc'


alias bb=goodbye

alias svim="sudo vim"
alias vime="vim -u ~/.vimencrypt -x"

alias scr="screen -RDS"
alias sls="screen -ls"

alias -s c=vim
alias -s cpp=vim
alias -s h=vim
alias -s html=vim
alias -s xml=vim

alias v=vim -p
alias gv=gvim -p

#git stuff
alias gpl='git pull'
alias gch='git checkout'
alias gp='git push'
alias gm='git merge'
alias gf='git fetch'
alias gst='git status'
alias gmt='git commit'
alias gtr='git tree'
alias ga='git add'

#emerge eix gentoo stuff
alias es='sudo eix-sync'
alias ef='eix'
alias ep='sudo emerge --jobs=2 --quiet-build y portage'
alias e='sudo emerge --jobs=2 -av --quiet-build y'
alias eu='sudo emerge --jobs=5 --keep-going --load-average=2 --with-bdeps=y -avuND --quiet-build=y @system && \
    sudo emerge --jobs=5 --keep-going --load-average=2 --with-bdeps=y -avuND --quiet-build=y @world'

function extract () {
if [[ -f "$1" ]]; then
    case "$1" in
        *.tbz2 | *.tar.bz2) tar -xvjf  "$1"     ;;
    *.txz | *.tar.xz)   tar -xvJf  "$1"     ;;
*.tgz | *.tar.gz)   tar -xvzf  "$1"     ;;
        *.tar | *.cbt)      tar -xvf   "$1"     ;;
    *.zip | *.cbz)      unzip      "$1"     ;;
*.rar | *.cbr)      unrar x    "$1"     ;;
        *.arj)              unarj x    "$1"     ;;
    *.ace)              unace x    "$1"     ;;
*.bz2)              bunzip2    "$1"     ;;
        *.xz)               unxz       "$1"     ;;
    *.gz)               gunzip     "$1"     ;;
*.7z)               7z x       "$1"     ;;
        *.Z)                uncompress "$1"     ;;
    *.gpg)       gpg2 -d "$1" | tar -xvzf - ;;
*) echo "Error: failed to extract $1" ;;
    esac
else
    echo "Error: $1 is not a valid file for extraction"
fi
}


function venv () {
if [[ "x$1" == "x" ]]; then
    echo "Usage: venv <virtualenv folder>"
else
    source "$1/bin/activate"
fi
}
function open () {
if [[ -f "$1" ]]; then
    case "$1" in
        *.png)              gpicview     "$1" &   ;;
    *.jpeg)             gpicview     "$1" &   ;;
*.JPG)              gpicview     "$1" &   ;;
        *.jpg)              gpicview     "$1" &   ;;
    *.pdf)              zathura     "$1" &> /dev/null &   ;;
*.eps)              zathura     "$1" &> /dev/null &   ;;
        *.ps)               zathura     "$1" &> /dev/null &   ;;
    *.odt | *.doc)      libreoffice "$1" &> /dev/null &   ;;
*.avi)              mplayer     "$1"    ;;
        *)                  vim "$1"            ;;
    esac
else
    echo "Error: $1 is not a valid file to open"
fi
}

function play () {
if [[ -f "$1" ]]; then
    case "$1" in
        *.mp3 | *.ogg)          mplayer "$1"   ;;
    *.pls | *.m3u)          mplayer -playlist "$1"   ;;
*) echo "Error: failed to open $1" ;;
    esac
else
    echo "Error: $1 could not play file"
fi
}
function calc () { awk "BEGIN{ print $* }" ;}

setopt correct
setopt hist_ignore_all_dups
setopt nohup
setopt NO_cdable_vars

function welcome() {
echo -en '\e[1;31m'
figlet $(hostname)
echo -en '\e[0m'
echo -e 'What is thy bidding, '$(whoami)'?'
}

function loop() {
while true;
do
    $*
done
}
function any() {
#set -a files
files=($*)
echo ${files[#]}
#for f in $files
#    echo $f
let x=${files[RANDOM]}
echo $x
#echo $files

}
function goodbye() {
echo 'Goodnight master, powering off'
sudo halt
}

welcome
export GNUPLOT_DEFAULT_GDFONT=/usr/share/fonts/dejavu/DejaVuSansMono.ttf 
export I_HATE_GAME_HINTS=1

which keychain > /dev/null
if [ $? -eq 0 ];
then
    eval $(keychain -q --eval --agents ssh -Q ~/.ssh/id_rsa  ~/.ssh/id_rsa_foss  ~/.ssh/id_rsa_git )
fi

