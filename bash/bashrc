# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

export  TERM=xterm

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias music='sudo mount -t smbfs //192.168.1.5/music /home/master/SHARE/Music_share/'
    alias music_off='sudo umount /home/master/SHARE/Music_share'
    alias torrent='sudo mount -t smbfs //192.168.1.5/Torrents /home/master/SHARE/Torrent_share/'
    alias torrent_off='sudo umount /home/master/SHARE/Torrent_share'
    alias homes='sudo mount -t smbfs //192.168.1.5/home /home/master/SHARE/Home_share/'
    alias homes_off='sudo umount /home/master/SHARE/Home_share'
    alias mount_all='music && torrent && homes'
    alias unmount_all='sudo umount /home/master/SHARE/Music_share && sudo umount /home/master/SHARE/Torrent_share && sudo umount /home/master/SHARE/Home_share'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
#alias l='ls -CF'
alias cleartorrents='rm ~/Downloads/*.torrent'
alias greg='grep'
alias lol='echo :D ROFL!!'
alias x='exit'
alias c='clear'
alias f='fortune | cowsay -n -f ${cow_images[cow_random]}'
alias chat='irc -c \#foss.ntua master_greg'
alias vpn='cd /etc/openvpn/ && sudo openvpn --config ntua-udp.ovpn
'
alias xmips='xspim -font 6x10'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
#PS1='\[\e[1;31m\]\u\[\e[m\] \[\e[1;34m\]\w\[\e[m\] \[\e[0;31m\]\$ \[\e[m\]\[\e[1;32m\]'
cow_images=(apt dragon-and-cow koala snowman beavis.zen duck kosh sodomized-sheep bong elephant luke-koala stegosaurus bud-frogs elephant-in-snake mech-and-cow stimpy bunny eyes meow suse calvin flaming-sheep milk three-eyes cheese ghostbusters moofasa turkey cock gnu moose turtle cower head-in mutilated tux daemon hellokitty ren vader default kiss sheep vader-koala dragon kitty skeleton www)




# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ls='ls --color=auto'
alias l='ls --color=auto'
alias la='ls -A'
alias ll='ls -alFh'
alias rl='rlwrap -Acr'
alias files="ls -R | grep ':$' | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/' "
[[ -x =time ]] && alias time='command time'
alias ping='ping -c 4'
alias grep='grep --color=auto'
alias x='exit'
alias c='clear'
alias s='source ~/.bashrc'
alias svim="sudo vim"
alias v='vim -p'
alias gv=g'vim -p'
alias gpl='git pull'
alias gco='git checkout'
alias gp='git push'
alias gm='git merge'
alias gf='git fetch'
alias gst='git status'
alias gtr='git tree'
alias es='sudo eix-sync'
alias ef='eix'
alias ep='sudo emerge --jobs=2 --quiet-build y portage'
alias e='sudo emerge --jobs=2 -av --quiet-build y'
alias eu='sudo emerge --jobs=5 --keep-going --load-average=2 --with-bdeps=y -avuND --quiet-build=y @world'



cow_random=RANDOM%46
function cut_pwd {
        newPWD="${PWD/#$HOME/~}"
        echo $newPWD | awk 'BEGIN{FS="/"}{if (NF<3) 
                                print $0;
                                else print $(NF-2) "/" $(NF-1) "/" $NF;}'
    }


function git_branch {
BRANCH=$(git branch 2> /dev/null |  sed -e '/^[^*]/d' -e 's/\* //')
    if [ 'x'$BRANCH = 'x' ]
    then
        echo ''
    else
        echo -e '\e[1;34m(\e[1;33m'$BRANCH'\e[1;34m)\e[0m'
    fi
}

PS1='\[\e[1;37m\]\h\[\e[m\] \[\e[1;32m\]`cut_pwd`\[\e[m\] `git_branch` \[\e[0;37m\]\$ \[\e[m\]'

#PS1='\[\e[0;32m\]\u\[\e[m\] \[\e[1;34m\]\w\[\e[m\] \[\e[1;32m\]\$\[\e[m\] \[\e[1;37m\]'

#PS1='\e[0;37m\[\e[1;31m\]\u \[\e[1;34m\]\w\e[0;37m\e[0;37m :\[\e[1;32m\]->\[\e[m\] '
#PS1='\e[1;34m\u\[\e[m\] \[\e[1;34m\]\w\[\e[m\] \[\e[0;31m\]\$ \[\e[m\]' 
